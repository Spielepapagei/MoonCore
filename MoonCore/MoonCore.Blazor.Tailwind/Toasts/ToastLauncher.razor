@using MoonCore.Blazor.Helpers
@using MoonCore.Blazor.Tailwind.Toasts.Components
@using MoonCore.Helpers
@using MoonCore.Services

@inject ToastService ToastService

<div aria-live="assertive" class="pointer-events-none fixed inset-0 flex items-end px-4 py-6 sm:p-6 z-40">
    <div class="flex w-full flex-col items-center space-y-4 sm:items-end">
        @foreach (var item in Items)
        {
            <div class="pointer-events-auto w-full max-w-sm overflow-hidden rounded-lg bg-gray-750 shadow-lg ring-1 ring-black ring-opacity-5">
                <div class="p-4">
                    <div class="flex items-center">
                        @item.Component
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code
{
    private readonly List<ToastItem> Items = new();

    protected override void OnInitialized()
    {
        ToastService.SetLauncher(this);
    }

    public async Task<ToastItem> Launch<T>(Action<Dictionary<string, object>>? onConfigure = null, int hideDelay = -1) where T : BaseToast
    {
        var item = new ToastItem();

        item.Component = ComponentHelper.FromType<T>(buildAttr =>
        {
            buildAttr.Add("Launcher", this);
            buildAttr.Add("ToastItem", item);
            
            onConfigure?.Invoke(buildAttr);
        });

        if (hideDelay > 0)
        {
            Task.Run(async () =>
            {
                await Task.Delay(hideDelay);
                await Close(item);
            });
        }
        
        Items.Add(item);
        await InvokeAsync(StateHasChanged);

        return item;
    }

    public async Task Close(ToastItem item)
    {
        if(Items.Contains(item))
            Items.Remove(item);

        await InvokeAsync(StateHasChanged);
    }
}