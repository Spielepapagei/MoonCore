@using MoonCore.Blazor.Bootstrap.Models
@using MoonCore.Blazor.Bootstrap.Services
@using MoonCore.Blazor.Helpers
@using MoonCore.Helpers
@using MoonCore.Services

@inject ToastService ToastService
@inject MoonCoreBlazorBootstrapConfiguration BootstrapConfiguration

@{
    ToastLaunchItem[] items;

    lock (Items)
        items = Items.ToArray();

    ToastLaunchItem[] namedItems;

    lock (NamedItems)
        namedItems = NamedItems.Values.ToArray();
}

<div style="z-index: 11; position: fixed; bottom: 0; right: 0; padding: 1rem;">
    @foreach (var item in items)
    {
        <div id="toastLauncher@(item.Id)" class="toast my-2 fade" role="alert">
            @item.Render
        </div>
    }

    @foreach (var item in namedItems)
    {
        <div id="toastLauncher@(item.Id)" class="toast my-2 fade" role="alert">
            @item.Render
        </div>
    }
</div>

@code
{
    private readonly List<ToastLaunchItem> Items = new();
    private readonly Dictionary<string, ToastLaunchItem> NamedItems = new();
    private int Counter = 1;

    protected override async Task OnInitializedAsync()
    {
        await ToastService.SetLaunchPoint(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        ToastLaunchItem[] items;

        lock (Items)
            items = Items.ToArray();

        foreach (var item in items)
        {
            if (item.Initialized)
                continue;

            await ToastService.Show($"toastLauncher{item.Id}");

            Task.Run(async () =>
            {
                await Task.Delay(item.Duration);

                lock (Items)
                {
                    if (Items.Contains(item))
                        Items.Remove(item);
                }

                await InvokeAsync(StateHasChanged);
            });

            item.Initialized = true;
        }

        ToastLaunchItem[] namedItems;

        lock (NamedItems)
            namedItems = NamedItems.Values.ToArray();
        
        foreach (var item in namedItems)
        {
            if (item.Initialized)
                continue;

            await ToastService.Show($"toastLauncher{item.Id}");

            item.Initialized = true;
        }
    }

    public async Task Launch<T>(TimeSpan? duration = null, Action<Dictionary<string, object>>? buildAttributes = null) where T : ComponentBase
    {
        var item = new ToastLaunchItem()
        {
            Id = Counter + 0,
            Duration = duration ?? BootstrapConfiguration.Toast.Duration,
            Render = ComponentHelper.FromType<T>(buildAttributes)
        };

        lock (Items)
            Items.Add(item);

        Counter++;

        await InvokeAsync(StateHasChanged);
    }

    public async Task LaunchNamed<T>(string name, Action<Dictionary<string, object>>? buildAttributes = null) where T : ComponentBase
    {
        var item = new ToastLaunchItem()
        {
            Id = Counter + 0,
            Render = ComponentHelper.FromType<T>(buildAttributes)
        };

        lock (NamedItems)
            NamedItems[name] = item;

        Counter++;

        await InvokeAsync(StateHasChanged);
    }
    
    public async Task UpdateNamed<T>(string name, Action<Dictionary<string, object>>? buildAttributes = null) where T : ComponentBase
    {
        ToastLaunchItem? item;

        lock (NamedItems)
            item = NamedItems.ContainsKey(name) ? NamedItems[name] : null;
        
        if(item == null)
            return;

        item.Render = ComponentHelper.FromType<T>(buildAttributes);

        await InvokeAsync(StateHasChanged);
    }
    
    public async Task DeleteNamed(string name)
    {
        ToastLaunchItem? item;

        lock (NamedItems)
        {
            if(!NamedItems.ContainsKey(name))
                return;

            NamedItems.Remove(name);
        }
        
        await InvokeAsync(StateHasChanged);
    }
}