@using System.ComponentModel
@using Microsoft.Extensions.Logging
@using MoonCore.Blazor.Bootstrap.Attributes.Auto
@using MoonCore.Blazor.Bootstrap.Forms.Auto.Components
@using MoonCore.Blazor.Bootstrap.Models.Forms
@using MoonCore.Blazor.Helpers
@using MoonCore.Helpers
@using MoonCore.Services

@inject ILogger<AutoFormGenerator> Logger

<CascadingValue TValue="AutoFormGenerator" Name="Generator" Value="this" IsFixed="true">
    @ChildContent
</CascadingValue>

@if (CurrentPage != null)
{
    if (Pages.Count > 1)
    {
        <div class="mb-5">
            <ul class="nav nav-pills border-0 fs-5">
                @foreach (var page in Pages)
                {
                    <li class="nav-item">
                        <a class="nav-link text-white border-top-0 border-start-0 border-end-0 border-2 @(CurrentPage == page ? "active" : "bg-secondary")" href="#" @onclick:preventDefault @onclick="() => SelectPage(page)">
                            @(string.IsNullOrEmpty(page.Name) ? "General" : page.Name)
                        </a>
                    </li>
                }
            </ul>
        </div>
    }
        
    if (CurrentPage.CustomContent == null)
    {
        foreach (var section in CurrentPage.Sections)
        {
            <div class="card mb-6">
                @if (!string.IsNullOrEmpty(section.Name))
                {
                    <div class="card-header">
                        <div class="card-title">
                            @if (!string.IsNullOrEmpty(section.Icon))
                            {
                                <i class="bx bx-md @(section.Icon) text-primary me-3 align-middle"></i>
                            }
                            <span class="h3 align-middle">@(section.Name)</span>
                        </div>
                    </div>
                }
                <div class="card-body">
                    <div class="row g-8">
                        @foreach (var component in section.Components)
                        {
                            @component
                        }
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        @CurrentPage.CustomContent
    }
}

@code
{
    [Parameter] public object Model { get; set; }
    [Parameter] public Action<AutoFormGenerator>? OnConfigure { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    private readonly List<FormPage> Pages = new();
    private FormPage? CurrentPage;

    private Dictionary<Type, Type> ComponentReference = new();
    private Dictionary<string, object> AdditionalReference = new();
    private Dictionary<string, RenderFragment> PageReference = new();

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(Model);
        
        ComponentReference.Add(typeof(int), typeof(IntegerComponent));
        ComponentReference.Add(typeof(string), typeof(StringComponent));

        if (OnConfigure != null)
            OnConfigure.Invoke(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            foreach (var property in Model.GetType().GetProperties())
            {
                var attributes = property.GetCustomAttributes(true);

                var page = GetPage(attributes);
                var section = GetSection(attributes, page);

                // TODO: Add custom page handling

                // TODO: Add overrides for properties to use custom components

                if (TryGetAttribute(attributes, out CustomComponentAttribute componentAttribute))
                {
                    if (AdditionalReference.TryGetValue(componentAttribute.Name, out var renderCall))
                    {
                        var propRefBinderType = typeof(PropRefBinder<>).MakeGenericType(property.PropertyType);
                        var propRefBinder = Activator.CreateInstance(propRefBinderType, new[]
                        {
                            Model,
                            property
                        })!;

                        var renderCallType = typeof(RenderFragment<>)
                            .MakeGenericType(typeof(PropRefBinder<>)
                                .MakeGenericType(property.PropertyType));

                        var render = renderCallType.GetMethod("Invoke")!.Invoke(renderCall, new[]
                        {
                            propRefBinder
                        }) as RenderFragment;

                        section.Components.Add(render!);

                        continue;
                    }
                }

                if (ComponentReference.TryGetValue(property.PropertyType, out var componentType))
                {
                    var displayName = Formatter.ConvertCamelCaseToSpaces(property.Name);
                    var description = "";

                    if (TryGetAttribute(attributes, out DisplayNameAttribute nameAttribute))
                        displayName = nameAttribute.DisplayName;

                    if (TryGetAttribute(attributes, out DescriptionAttribute descriptionAttribute))
                        description = descriptionAttribute.Description;

                    var propRefBinderType = typeof(PropRefBinder<>).MakeGenericType(property.PropertyType);
                    var propRefBinder = Activator.CreateInstance(propRefBinderType, new[]
                    {
                        Model,
                        property
                    })!;

                    var render = ComponentHelper.FromType(componentType, parameters =>
                    {
                        parameters.Add("Reference", propRefBinder);

                        parameters.Add("Name", displayName);
                        parameters.Add("Description", description);

                        parameters.Add("Attributes", attributes);
                    });

                    section.Components.Add(render);
                }
            }

            foreach (var page in PageReference)
            {
                Pages.Add(new()
                {
                    Name = page.Key,
                    CustomContent = page.Value
                });
            }

            CurrentPage = Pages.FirstOrDefault(x => x.Name == "");

            if (CurrentPage == null && Pages.Count > 0)
                CurrentPage = Pages.First();

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SelectPage(FormPage page)
    {
        CurrentPage = page;
        await InvokeAsync(StateHasChanged);
    }

    private FormPage GetPage(object[] attributes)
    {
        if (TryGetAttribute(attributes, out PageAttribute pageAttribute))
        {
            var foundPage = Pages.FirstOrDefault(x => x.Name == pageAttribute.Name);

            if (foundPage == null)
            {
                foundPage = new FormPage()
                {
                    Name = pageAttribute.Name
                };

                Pages.Add(foundPage);
            }

            return foundPage;
        }

        var defaultPage = Pages.FirstOrDefault(x => x.Name == "");

        if (defaultPage == null)
        {
            defaultPage = new FormPage()
            {
                Name = ""
            };

            Pages.Add(defaultPage);
        }

        return defaultPage;
    }

    private FormSection GetSection(object[] attributes, FormPage page)
    {
        if (TryGetAttribute(attributes, out SectionAttribute sectionAttribute))
        {
            var foundSection = page.Sections.FirstOrDefault(x => x.Name == sectionAttribute.Name);

            if (foundSection == null)
            {
                foundSection = new FormSection()
                {
                    Name = sectionAttribute.Name,
                    Icon = sectionAttribute.Icon
                };

                page.Sections.Add(foundSection);
            }

            return foundSection;
        }

        var defaultSection = page.Sections.FirstOrDefault(x => x.Name == "");

        if (defaultSection == null)
        {
            defaultSection = new FormSection()
            {
                Name = ""
            };

            page.Sections.Add(defaultSection);
        }

        return defaultSection;
    }

    public void AddAdditionalReference(string name, object render)
    {
        AdditionalReference[name] = render;
    }

    public void AddComponentReference(Type type, Type componentType)
    {
        ComponentReference[type] = componentType;
    }
    
    public void AddPageReference(string name, RenderFragment content)
    {
        PageReference[name] = content;
    }

    private bool TryGetAttribute<T>(object[] attributes, out T result) where T : Attribute
    {
        var searchType = typeof(T);

        var attr = attributes
            .FirstOrDefault(x => x.GetType() == searchType);

        if (attr == null)
        {
            result = default!;
            return false;
        }

        result = (attr as T)!;
        return true;
    }
}