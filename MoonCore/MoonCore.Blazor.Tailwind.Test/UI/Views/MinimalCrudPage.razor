@page "/minimalcrud"

@using Bogus
@using MoonCore.Blazor.Tailwind.MinimalCrud
@using MoonCore.Blazor.Tailwind.Test.Models
@using MoonCore.Helpers
@using MoonCore.Models
@using MoonCore.Blazor.Tailwind.DataTable
@using MoonCore.Blazor.Tailwind.Toasts

@inject ToastService ToastService

<MinimalCrud TItem="DemoDataModel" OnConfigure="OnConfigure">
    <ChildContent>
        <DataColumn TItem="DemoDataModel" Field="@(x => x.Id)" Title="Id" ExportField="@(x => x.Id)" />
        <DataColumn TItem="DemoDataModel" Field="@(x => x.Email)" Title="Email" IsSortable="true" />
        <DataColumn TItem="DemoDataModel" Field="@(x => x.Name)" Title="Username" IsSortable="true" ExportField="@(x => x.Name)" />
    </ChildContent>
    <ItemActions>
        <a href="#" @onclick="() => CustomItemAction(context)" @onclick:preventDefault
           class="text-tertiary-500 mr-2 sm:mr-3">
            <i class="icon-activity text-base"></i>
        </a>
    </ItemActions>
    <SelectionActions>
        <button @onclick="() => CustomSelectionAction(context)" class="btn btn-tertiary">
            <i class="icon-pickaxe mr-1"></i>
            Selection action
        </button>
    </SelectionActions>
    <Actions>
        <a href="/toasts" class="btn btn-success">
            <i class="icon-flame mr-1"></i>
            Some action
        </a>
    </Actions>
</MinimalCrud>

@code
{
    private static List<DemoDataModel>? Data;
    
    protected override void OnInitialized()
    {
        if (Data == null)
        {
            var faker = new Faker<DemoDataModel>()
                .RuleFor(x => x.Id, x => x.UniqueIndex)
                .RuleFor(x => x.Email, x => x.Person.Email)
                .RuleFor(x => x.Flag, x => x.Random.Bool())
                .RuleFor(x => x.Name, x => x.Person.UserName);

            Data = faker
                .Generate(25);
        }
    }

    private void OnConfigure(MinimalCrudOptions<DemoDataModel> options)
    {
        options.Title = "Demo Data Model";
        options.ItemLoader = async (page, pageSize) => 
            PagedData<DemoDataModel>.Create(Data!, page, pageSize);
        
        options.CreateUrl = ComponentHelper.GetRouteOfComponent<Index>();
        options.UpdateUrl = item => ComponentHelper.GetRouteOfComponent<CrudItemPage>(item.Id)!;
        options.DeleteFunction = async model => Data!.Remove(model);
    }

    private async Task CustomItemAction(DemoDataModel model)
    {
        await ToastService.Success("Custom item action name: " + model.Name);
    }
    
    private async Task CustomSelectionAction(List<DemoDataModel> list)
    {
        await ToastService.Success("Custom selection action count: " + list.Count);
    }
}
